{
  "address": "propFYxqmVcufMhk5esNMrexq2ogHbbC2kP9PU1qxKs",
  "metadata": {
    "name": "proposal",
    "version": "0.1.0",
    "spec": "0.1.0"
  },
  "instructions": [
    {
      "name": "initialize_proposal_v0",
      "discriminator": [
        63,
        235,
        9,
        201,
        163,
        171,
        206,
        33
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "namespace",
          "docs": [
            "Every proposal must have a namespace to prevent seed collision"
          ],
          "signer": true
        },
        {
          "name": "proposal",
          "writable": true
        },
        {
          "name": "owner"
        },
        {
          "name": "proposal_config"
        },
        {
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "InitializeProposalArgsV0"
            }
          }
        }
      ]
    },
    {
      "name": "initialize_proposal_config_v0",
      "discriminator": [
        126,
        56,
        75,
        243,
        150,
        18,
        71,
        178
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "owner",
          "docs": [
            "Every proposal config must have an owner to prevent seed collision"
          ],
          "signer": true
        },
        {
          "name": "proposal_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  34,
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  34
                ]
              },
              {
                "kind": "arg",
                "path": "args.name"
              }
            ]
          }
        },
        {
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "InitializeProposalConfigArgsV0"
            }
          }
        }
      ]
    },
    {
      "name": "vote_v0",
      "discriminator": [
        82,
        47,
        20,
        22,
        108,
        59,
        245,
        115
      ],
      "accounts": [
        {
          "name": "vote_controller",
          "signer": true
        },
        {
          "name": "voter"
        },
        {
          "name": "state_controller",
          "writable": true
        },
        {
          "name": "proposal_config",
          "relations": [
            "on_vote_hook",
            "state_controller",
            "vote_controller"
          ]
        },
        {
          "name": "proposal",
          "writable": true,
          "relations": [
            "proposal_config"
          ]
        },
        {
          "name": "on_vote_hook"
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "VoteArgsV0"
            }
          }
        }
      ]
    },
    {
      "name": "update_state_v0",
      "discriminator": [
        234,
        64,
        38,
        223,
        224,
        216,
        29,
        82
      ],
      "accounts": [
        {
          "name": "state_controller",
          "signer": true
        },
        {
          "name": "proposal",
          "writable": true,
          "relations": [
            "proposal_config"
          ]
        },
        {
          "name": "proposal_config",
          "relations": [
            "state_controller"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "UpdateStateArgsV0"
            }
          }
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "ProposalConfigV0",
      "discriminator": [
        162,
        41,
        210,
        200,
        205,
        177,
        228,
        11
      ]
    },
    {
      "name": "ProposalV0",
      "discriminator": [
        254,
        194,
        16,
        171,
        214,
        20,
        192,
        81
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "ArithmeticError",
      "msg": "Error in arithmetic"
    }
  ],
  "types": [
    {
      "name": "InitializeProposalConfigArgsV0",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "vote_controller",
            "docs": [
              "Signer that controls voting and vote weights"
            ],
            "type": "pubkey"
          },
          {
            "name": "state_controller",
            "docs": [
              "Signer that controls the transitions of `ProposalState`",
              "You can either use the default `state-controller` smart contract",
              "Or you can implement a program that calls the `resolve_v0` method.",
              "The vote can only be resolved when this `resolution_settings` PDA signs `resolve_v0`. This allows",
              "you to trigger resolution on either (a) a vote, (b) a timestamp, or (c) some custom trigger with clockwork"
            ],
            "type": "pubkey"
          },
          {
            "name": "on_vote_hook",
            "docs": [
              "Optional program that will be called with `on_vote_v0` after every vote",
              "Defaults to the owner of `resolution_settings`, which allows it to reactively call resolve_v0"
            ],
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "ChoiceArg",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "uri",
            "docs": [
              "Any other data that you may want to put in here"
            ],
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "InitializeProposalArgsV0",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "seed",
            "docs": [
              "Allow a custom seed for indexing"
            ],
            "type": "bytes"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "uri",
            "type": "string"
          },
          {
            "name": "max_choices_per_voter",
            "docs": [
              "Allows for multiple selection votes"
            ],
            "type": "u16"
          },
          {
            "name": "choices",
            "type": {
              "vec": {
                "defined": {
                  "name": "ChoiceArg"
                }
              }
            }
          },
          {
            "name": "tags",
            "type": {
              "vec": "string"
            }
          }
        ]
      }
    },
    {
      "name": "UpdateStateArgsV0",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "new_state",
            "type": {
              "defined": {
                "name": "ProposalState"
              }
            }
          }
        ]
      }
    },
    {
      "name": "VoteArgsV0",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "choice",
            "type": "u16"
          },
          {
            "name": "weight",
            "type": "u128"
          },
          {
            "name": "remove_vote",
            "docs": [
              "This is a remove operation"
            ],
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "Choice",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "weight",
            "docs": [
              "Total vote weight behind this choice. u128 to support u64 tokens multiplied by a large multiplier (as in helium)"
            ],
            "type": "u128"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "uri",
            "docs": [
              "Any other data that you may want to put in here"
            ],
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "ProposalState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Draft"
          },
          {
            "name": "Cancelled"
          },
          {
            "name": "Voting",
            "fields": [
              {
                "name": "start_ts",
                "type": "i64"
              }
            ]
          },
          {
            "name": "Resolved",
            "fields": [
              {
                "name": "choices",
                "type": {
                  "vec": "u16"
                }
              },
              {
                "name": "end_ts",
                "type": "i64"
              }
            ]
          },
          {
            "name": "Custom",
            "fields": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "bin",
                "type": "bytes"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "ProposalConfigV0",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "vote_controller",
            "docs": [
              "Signer that controls voting and vote weights"
            ],
            "type": "pubkey"
          },
          {
            "name": "state_controller",
            "docs": [
              "Signer that controls the transitions of `ProposalState`",
              "You can either use the default `state-controller` smart contract",
              "Or you can implement a program that calls the `resolve_v0` method.",
              "The vote can only be resolved when this `resolution_settings` PDA signs `resolve_v0`. This allows",
              "you to trigger resolution on either (a) a vote, (b) a timestamp, or (c) some custom trigger with clockwork"
            ],
            "type": "pubkey"
          },
          {
            "name": "on_vote_hook",
            "docs": [
              "Optional program that will be called with `on_vote_v0` after every vote. This allows you to resolve",
              "the vote eagerly. For most use cases, this should just be the owner of the state controller.",
              "WARNING: This program has full authority to set the outcome of votes, make sure you trust it"
            ],
            "type": "pubkey"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "bump_seed",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ProposalV0",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "namespace",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "state",
            "type": {
              "defined": {
                "name": "ProposalState"
              }
            }
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "proposal_config",
            "type": "pubkey"
          },
          {
            "name": "max_choices_per_voter",
            "docs": [
              "Allows for multiple selection votes"
            ],
            "type": "u16"
          },
          {
            "name": "seed",
            "type": "bytes"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "uri",
            "docs": [
              "URI to json containing name, description, etc"
            ],
            "type": "string"
          },
          {
            "name": "tags",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "choices",
            "type": {
              "vec": {
                "defined": {
                  "name": "Choice"
                }
              }
            }
          },
          {
            "name": "bump_seed",
            "type": "u8"
          }
        ]
      }
    }
  ]
}